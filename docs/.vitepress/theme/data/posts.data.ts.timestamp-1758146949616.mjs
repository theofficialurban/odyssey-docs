// docs/.vitepress/theme/data/posts.data.ts
import { globby } from "file:///D:/Programming/odyssey-vitepress/node_modules/.pnpm/globby@14.1.0/node_modules/globby/index.js";
import matter from "file:///D:/Programming/odyssey-vitepress/node_modules/.pnpm/gray-matter@4.0.3/node_modules/gray-matter/index.js";
import fs from "fs";
import path from "path";
import { useRouter } from "file:///D:/Programming/odyssey-vitepress/node_modules/.pnpm/vitepress@1.0.0-alpha.28_@a_e48b5939949ec87842df4fa3e00bca73/node_modules/vitepress/dist/node/index.js";
var router = useRouter();
console.log(router.route);
var posts_data_default = {
  async load() {
    const files = await globby("docs/**/*.md");
    const posts = await Promise.all(
      files.map(async (file) => {
        const fullPath = path.resolve(process.cwd(), file);
        const fileContent = fs.readFileSync(fullPath, "utf-8");
        const { data } = matter(fileContent);
        return {
          ...data,
          href: file.replace(/^docs/, "").replace(/\.md$/, ".html")
        };
      })
    );
    return posts.sort((a, b) => new Date(b.date) - new Date(a.date));
  }
};
export {
  posts_data_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZG9jcy8udml0ZXByZXNzL3RoZW1lL2RhdGEvcG9zdHMuZGF0YS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkQ6XFxcXFByb2dyYW1taW5nXFxcXG9keXNzZXktdml0ZXByZXNzXFxcXGRvY3NcXFxcLnZpdGVwcmVzc1xcXFx0aGVtZVxcXFxkYXRhXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJEOlxcXFxQcm9ncmFtbWluZ1xcXFxvZHlzc2V5LXZpdGVwcmVzc1xcXFxkb2NzXFxcXC52aXRlcHJlc3NcXFxcdGhlbWVcXFxcZGF0YVxcXFxwb3N0cy5kYXRhLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9Qcm9ncmFtbWluZy9vZHlzc2V5LXZpdGVwcmVzcy9kb2NzLy52aXRlcHJlc3MvdGhlbWUvZGF0YS9wb3N0cy5kYXRhLnRzXCI7Ly8gTk8gTE9OR0VSIE5FRURFRDogaW1wb3J0IHsgY3JlYXRlQ29udGVudExvYWRlciB9IGZyb20gJ3ZpdGVwcmVzcydcclxuaW1wb3J0IHsgZ2xvYmJ5IH0gZnJvbSBcImdsb2JieVwiO1xyXG5pbXBvcnQgbWF0dGVyIGZyb20gXCJncmF5LW1hdHRlclwiO1xyXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IHVzZVJvdXRlciwgdHlwZSBIZWFkQ29uZmlnIH0gZnJvbSBcInZpdGVwcmVzc1wiO1xyXG5pbXBvcnQgdHlwZSB7IEJhbm5lckZvbnRQcm9wcywgQmFubmVyUHJvcHMgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG5jb25zb2xlLmxvZyhyb3V0ZXIucm91dGUpO1xyXG5leHBvcnQgaW50ZXJmYWNlIEZyb250bWF0dGVyIHtcclxuICB0aXRsZT86IHN0cmluZztcclxuICB0aXRsZVRlbXBsYXRlPzogc3RyaW5nIHwgYm9vbGVhbjtcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICBoZWFkPzogSGVhZENvbmZpZ1tdO1xyXG4gIGxheW91dD86IFwiZG9jXCIgfCBcImhvbWVcIiB8IFwicGFnZVwiIHwgXCJmYWxzZVwiO1xyXG4gIG5hdmJhcj86IGJvb2xlYW47XHJcbiAgc2lkZWJhcj86IGJvb2xlYW47XHJcbiAgYXNpZGU/OiBib29sZWFuIHwgXCJsZWZ0XCI7XHJcbiAgb3V0bGluZT86IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0gfCBcImRlZXBcIiB8IGZhbHNlO1xyXG4gIGxhc3RVcGRhdGVkPzogYm9vbGVhbiB8IERhdGU7XHJcbiAgZWRpdExpbms/OiBib29sZWFuO1xyXG4gIGZvb3Rlcj86IGJvb2xlYW47XHJcbiAgcGFnZUNsYXNzPzogc3RyaW5nO1xyXG4gIGlzSG9tZT86IGJvb2xlYW47XHJcbiAgb2dpbWFnZT86IHN0cmluZztcclxuICBiYW5uZXI/OiBib29sZWFuO1xyXG4gIGJhbm5lclNldHRpbmdzPzogeyBmb250PzogQmFubmVyRm9udFByb3BzOyBzZXR0aW5ncz86IEJhbm5lclByb3BzIH07XHJcbiAgdXNlSGVhZGVyRm9udD86IHN0cmluZztcclxuICB1c2VCb2R5Rm9udD86IHN0cmluZztcclxuICB1c2VCZ0NvbG9yPzogc3RyaW5nO1xyXG4gIGhyZWY/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAvLyBUaGUgbG9hZCgpIGZ1bmN0aW9uIGlzIHRoZSBjb3JlIG9mIHRoZSBkYXRhIGxvYWRlci5cclxuICAvLyBJdCdzIGFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIHJldHVybiB0aGUgZGF0YS5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgLy8gRmluZCBhbGwgbWFya2Rvd24gZmlsZXMgaW4gdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkuXHJcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGdsb2JieShcImRvY3MvKiovKi5tZFwiKTtcclxuXHJcbiAgICAvLyBGb3IgZWFjaCBmaWxlLCByZWFkIGl0cyBjb250ZW50IGFuZCBwYXJzZSB0aGUgZnJvbnRtYXR0ZXIuXHJcbiAgICBjb25zdCBwb3N0czogRnJvbnRtYXR0ZXJbXSA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICBmaWxlcy5tYXAoYXN5bmMgKGZpbGUpID0+IHtcclxuICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBmaWxlKTtcclxuICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmdWxsUGF0aCwgXCJ1dGYtOFwiKTtcclxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IG1hdHRlcihmaWxlQ29udGVudCk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgZnJvbnRtYXR0ZXIgYW5kIHRoZSBnZW5lcmF0ZWQgVVJMLlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5kYXRhLFxyXG4gICAgICAgICAgLy8gR2VuZXJhdGUgYSBVUkwtZnJpZW5kbHkgcGF0aCBmcm9tIHRoZSBmaWxlIHBhdGguXHJcbiAgICAgICAgICBocmVmOiBmaWxlLnJlcGxhY2UoL15kb2NzLywgXCJcIikucmVwbGFjZSgvXFwubWQkLywgXCIuaHRtbFwiKSxcclxuICAgICAgICB9IGFzIEZyb250bWF0dGVyO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIC8vY29uc29sZS5sb2cocG9zdHMpO1xyXG4gICAgLy8gU29ydCBwb3N0cyBieSBkYXRlIGluIGRlc2NlbmRpbmcgb3JkZXIgKG5ld2VzdCBmaXJzdCkuXHJcbiAgICByZXR1cm4gcG9zdHMuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYi5kYXRlKSAtIG5ldyBEYXRlKGEuZGF0ZSkpO1xyXG4gIH0sXHJcbn07XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxTQUFTLGNBQWM7QUFDdkIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sUUFBUTtBQUNmLE9BQU8sVUFBVTtBQUNqQixTQUFTLGlCQUFrQztBQUczQyxJQUFNLFNBQVMsVUFBVTtBQUN6QixRQUFRLElBQUksT0FBTyxLQUFLO0FBeUJ4QixJQUFPLHFCQUFRO0FBQUEsRUFHYixNQUFNLE9BQU87QUFFWCxVQUFNLFFBQVEsTUFBTSxPQUFPLGNBQWM7QUFHekMsVUFBTSxRQUF1QixNQUFNLFFBQVE7QUFBQSxNQUN6QyxNQUFNLElBQUksT0FBTyxTQUFTO0FBQ3hCLGNBQU0sV0FBVyxLQUFLLFFBQVEsUUFBUSxJQUFJLEdBQUcsSUFBSTtBQUNqRCxjQUFNLGNBQWMsR0FBRyxhQUFhLFVBQVUsT0FBTztBQUNyRCxjQUFNLEVBQUUsS0FBSyxJQUFJLE9BQU8sV0FBVztBQUduQyxlQUFPO0FBQUEsVUFDTCxHQUFHO0FBQUEsVUFFSCxNQUFNLEtBQUssUUFBUSxTQUFTLEVBQUUsRUFBRSxRQUFRLFNBQVMsT0FBTztBQUFBLFFBQzFEO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUdBLFdBQU8sTUFBTSxLQUFLLENBQUMsR0FBRyxNQUFNLElBQUksS0FBSyxFQUFFLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxJQUFJLENBQUM7QUFBQSxFQUNqRTtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
